x<-longdat::make_LD(dat)
out<-longdat::subject(x,10)
print(class(x))
View(x)
out<-longdat::subject(x,14)
out<-longdat::subject(x,22)
out<-longdat::subject(x,54)
out<-longdat::subject(x,44)
rss <- 1083
n  <- 67040
p <- 2
AIC1  <- (n*(log((2*pi*rss)/n)+1)+2*p)
AIC1
install.packages(c("Matrix", "mgcv", "rmarkdown", "stringi"))
install.packages('knitr', dependencies = TRUE)
package_version(knitr)
package_version('knitr')
library(knitr)
package_version('knitr')
knitr::opts_chunk$set(echo = TRUE)
x+y
update.packages(ask = FALSE, repos = 'https://cran.rstudio.org')
install.packages('knitr', repos = c('https://xran.yihui.name', 'https://cran.rstudio.org'))
install.packages("knitr", repos = c("https://xran.yihui.name", "https://cran.rstudio.org"))
install.packages('knitr', repos = c('https://xran.yihui.name', 'https://cran.rstudio.org'))
knitr::opts_chunk$set(echo = TRUE)
x+y
x+y
install.packages('reticulate')
########################################
#### Decision Tree
########################################
install.packages("tree")
library(tree)
library(ISLR)
attach(Carseats)
############
write.csv(Carseats, file="Carseats.csv",row.names=F)
my.carseats <- read.csv("Carseats.csv")
head(my.carseats)
High=ifelse(Sales <= 8, "No", "Yes")
Carseats2 = data.frame(Carseats, High)
tree.carseats = tree(High~.-Sales, data=Carseats2)
summary(tree.carseats)
#### plot() display tree structure
plot(tree.carseats)
## pretty=0 includes the category names for any qualitative predictors
text(tree.carseats)
text(tree.carseats,pretty=0)
##
text(tree.carseats,pretty=1)
tree.carseats
#### calcuate training error and testing error
set.seed(2)
train = sample(1:nrow(Carseats2), 200)
knitr::opts_chunk$set(echo = TRUE)
set.seed(100)
train=sample(1:nrow(OJ),800)
test=OJ[-train]
dim(train)
library(tree)
tree.oj=tree(Purchase~.-Buy,data=OJ,subet=train)
library(ISLR)
attach(OJ)
View(OJ)
library(tree)
tree.oj=tree(Purchase~.,data=OJ,subet=train)
library(tree)
tree.oj=tree(Purchase~.,data=OJ,subset=train)
tree.oj
summary(tree.oj)
names(OJ)
plot(tree.oj)
test(rtree.oj.pretty=0)
plot(tree.oj)
test(tree.oj.pretty=0)
plot(tree.oj)
test(tree.oj,pretty=0)
plot(tree.oj)
text(tree.oj,pretty=0)
tree.oj
tree.pred.oj=predict(tree.oj,OJ[test,],type="class")
tree.pred=predict(tree.oj,test,type="class")
table(tree.pred.oj, OJ$Purchase[test])
tree.pred=predict(tree.oj,test,type="class")
table(tree.pred, OJ$Purchase[test])
tree.pred=predict(tree.oj,test,type="class")
table(tree.pred, test$Purchase)
tree.pred=predict(tree.oj,test,type="class")
table(tree.pred, OJ$Purchase[test])
tree.pred=predict(tree.oj,test,type="class")
table(tree.pred, test)
tree.pred
length(tree.pred)
length(test)
dim(test)
dim(tree.pred)
length(tree.pred)
table(tree.pred, OJ$Purchase[test])
OJ$Purchase[test]
OJ[test]$Purchase
OJ[test,]$Purchase
set.seed(100)
train=sample(1:nrow(OJ),800)
test=OJ[-train]
dim(test)
dim(test)
View(test)
View(train)
set.seed(100)
train=sample(1:nrow(OJ),800)
test=OJ[-train]
set.seed(100)
train=sample(1:nrow(OJ),800)
test=OJ[-train,]
library(tree)
tree.oj=tree(Purchase~.,data=OJ,subset=train)
tree.oj
summary(tree.oj)
plot(tree.oj)
text(tree.oj,pretty=0)
tree.oj
tree.pred=predict(tree.oj,test,type="class")
length(tree.pred)
table(tree.pred, OJ$Purchase[test])
head(test$Purchase)
test$Purchase
table(tree.pred, test$Purchase)
error.rate=1- mean(tree.pred.oj==OJ$Purchase[test])
error.rate=1- mean(tree.pred==OJ$Purchase[test])
error.rate=1- mean(tree.pred==test$Purchase)
error.rate
cv.oj=cv.tree(tree.oj, FUN=prune.misclass)
names(cv.oj)
cv.oj
plot(cv.oj$size,cv.oj$dev,type="b")
prune.oj=prune.misclass(tree.oj,best=4)
plot(prune.oj)
test(prune.oj,pretty=0)
prune.oj=prune.misclass(tree.oj,best=4)
plot(prune.oj)
text(prune.oj,pretty=0)
prune.tree.pred.oj=predict(prune.oj, OJ[test,], type="class")
prune.tree.pred.oj=predict(prune.oj, test, type="class")
table(pruen.tree.pred.oj,OJ$Purchase[test])
prune.tree.pred.oj=predict(prune.oj, test, type="class")
table(prune.tree.pred.oj,OJ$Purchase[test])
prune.tree.pred.oj=predict(prune.oj, test, type="class")
table(prune.tree.pred.oj,test$Purchase)
error.rate.prune=1-ean(prune.tree.pred.oj==OJ$Purchase[test])
prune.tree.pred.oj=predict(prune.oj, test, type="class")
table(prune.tree.pred.oj,test$Purchase)
error.rate.prune=1-mean(prune.tree.pred.oj==test$Purchase)
error.rate.prune
knitr::opts_chunk$set(echo = TRUE)
s <- function(N,k,a,t,c,g){
(1/N)*logb((factorial(N))/(factorial(a)*factorial(t)*factorial(c)*factorial(g)),base = 4)
}
s(N = 10, k = 4, a = 4, t = 4, c = 1, g = 1)
s <- function(N,k,a,t,c,g){
(1/N)*logb(base = 4,
(factorial(N))/
(factorial(a)*
factorial(t)*
factorial(c)*
factorial(g)))
}
s(N = 10, k = 4, a = 4, t = 4, c = 1, g = 1)
s(N = 10,
k = 4,
a = 4,
t = 4,
c = 1,
g = 1)
s(N = 10,
k = 20,
a = 4,
t = 4,
c = 1,
g = 1)
s(N = 10,
k = 20,
a = 4,
t = 4,
c = 1,
g = 1)
s <- function(N,k,a,t,c,g){
(1/N)*logb(base = k,
(factorial(N))/
(factorial(a)*
factorial(t)*
factorial(c)*
factorial(g)))
}
s(N = 10,
k = 4,
a = 4,
t = 4,
c = 1,
g = 1)
s(N = 10,
k = 20,
a = 4,
t = 4,
c = 1,
g = 1)
s_prot <-
s(N = 10,
k = 20,
a = 4,
t = 4,
c = 1,
g = 1)
s_prot
s_dna <-
s(N = 10,
k = 4,
a = 4,
t = 4,
c = 1,
g = 1)
s_dna
round(s_dna,2)
s_dna <-
s(N = 10,
k = 4,
a = 4,
t = 4,
c = 1,
g = 1)
s_dna
knitr::opts_chunk$set(echo = TRUE)
pairs(~ parity + age_chld + age_mom + bf, data=nepalibf, upper.panel=NULL)
pairs(~ parity + age_chld + age_mom + bf, data=nepalibf, upper.panel=NULL)
library(tidyverse)
nepalibf = read_csv("nepalibf.csv")
head(nepalibf)
summary(nepalibf)
table(nepalibf$bf)
pairs(~ parity + age_chld + age_mom + bf, data=nepalibf, upper.panel=NULL)
pairs(~ jitter(parity, .5) + jitter(age_chld, .5) + jitter(age_mom, .5) +
jitter(bf, .5), data=nepalibf, upper.panel=NULL, pch=20, cex=.5)
head(nepalibf)
summary(nepalibf)
table(nepalibf$bf)
summary(nepalibf)
table(nepalibf$bf)
summary(nepalibf)
dim(nepalibf)
table(nepalibf$bf)
sum(table(nepalibf$bf))
sum(table(nepalibf$bf))
dim(nepalibf)
summary(nepalibf)
pairs(~ jitter(parity, .5) + jitter(age_chld, .5) + jitter(age_mom, .5) +
jitter(bf, .5) + jitter(sex_chld, .5), data=nepalibf, upper.panel=NULL, pch=20, cex=.5)
pairs(~ jitter(parity, .5) + jitter(age_chld, .5) + jitter(age_mom, .5) + jitter(sex_chld, .5) + jitter(bf, .5), data=nepalibf, upper.panel=NULL, pch=20, cex=.5)
boxplot(age_chld ~ bf, data=nepalibf, ylab="Age of child (years)")
boxplot(age_mom ~ bf, data=nepalibf)
boxplot(parity ~ bf, data=nepalibf)
boxplot(age_chld ~ bf, data=nepalibf, ylab="Age of child (years)")
boxplot(age_mom ~ bf, data=nepalibf)
boxplot(parity ~ bf, data=nepalibf)
CT = xtabs(~ sex_chld + bf, data=nepalibf)
addmargins(CT)
prop.table(CT, margin=1)
addmargins(prop.table(CT, margin=1), margin=2)
graphData = nepalibf %>% #new data frame with variables to graph
group_by(age_chld_quart) %>% #group by age quartile
summarize(prop = mean(bf, na.rm=TRUE), # prop of bf in each quartile
lodds = log(prop/(1-prop))) # log odds for each quartile
qplot(x=age_chld_quart, y=lodds, data=graphData, xlab="Age group of
child (quartiles)", ylab="log(odds of breast-feeding)")
graphData = nepalibf %>% #new data frame with variables to graph
group_by(age_chld_quart) %>% #group by age quartile
summarize(prop = mean(bf, na.rm=TRUE), # prop of bf in each quartile
lodds = log(prop/(1-prop))) # log odds for each quartile
qplot(x=age_chld_quart, y=lodds, data=graphData, xlab="Age group of child (quartiles)", ylab="log(odds of breast-feeding)")
pairs(~ jitter(parity, .5) + jitter(age_chld, .5) + jitter(age_mom, .5) + jitter(bf, .5), data=nepalibf, upper.panel=NULL, pch=20, cex=.5)
nepalibf = nepalibf %>%
mutate(agechldc = age_chld - mean(age_chld))
model1 = glm(bf ~ sex_chld + agechldc, data=nepalibf,
family=binomial(link="logit"))
summary(model1)
exp(model1$coefficients)
exp(confint.default(model1))
exp(model1$coefficients)
summary(model1)
model1$coefficients
model1$coefficients
qplot(x=age_chld_quart, y=lodds, data=graphData, xlab="Age group of child (quartiles)", ylab="log(odds of breast-feeding)",geom = "line")
qplot(x=age_chld_quart, y=lodds, data=graphData, xlab="Age group of child (quartiles)", ylab="log(odds of breast-feeding)", geom = c("line","point"))
nepalibf = nepalibf %>%
mutate(age1 = age_chld - 24,
age2 = ifelse(age_chld > 24, age_chld - 24, 0),
age3 = ifelse(age_chld > 36, age_chld - 36, 0))
modelC = glm(bf~sex_chld+age1+age2+age3, data=nepalibf, family=binomial(link="logit"))
summary(modelC)
nepalibf = nepalibf %>%
mutate(agechldc = age_chld - mean(age_chld))
model1 = glm(bf ~ sex_chld + agechldc, data=nepalibf,
family=binomial(link="logit"))
summary(model1)
model1$coefficients
exp(model1$coefficients)
exp(confint.default(model1))
nepalibf = nepalibf %>% mutate(x3 = agechldc^2)
modelA = glm(bf~sex_chld+agechldc+x3, data=nepalibf, family=binomial(link="logit"))
summary(modelA)
modelB = glm(bf~sex_chld+agechldc, data=nepalibf, family=binomial(link="logit"))
summary(modelB)
anova(modelA, modelB, test="LRT")
modelD = glm(bf~sex_chld+age_chld, data=nepalibf, family=binomial(link="logit"))
summary(modelD)
anova(modelC, modelD, test="LRT")
modelA$coefficients
confint.default(modelA)
nepalibf = nepalibf %>%
mutate(age1 = age_chld - 24,
age2 = ifelse(age_chld > 24, age_chld - 24, 0),
age3 = ifelse(age_chld > 36, age_chld - 36, 0))
modelA$coefficients
confint.default(modelA)
anova(modelA, modelB, test="LRT")[,1]
anova(modelA, modelB, test="LRT")[,2]
anova(modelA, modelB, test="LRT")[,4]
anova(modelA, modelB, test="LRT")[,3]
anova(modelA, modelB, test="LRT")
anova(modelA, modelB, test="LRT")[,5]
anova(modelA, modelB, test="LRT")[,6]
anova(modelA, modelB, test="LRT")[,4]
anova(modelA, modelB, test="LRT")
anova(modelA, modelB, test="LRT")[,5]
anova(modelA, modelB, test="LRT")[2,5]
anova(modelA, modelB, test="LRT")
anova(modelA, modelB, test="LRT")
confint.default(modelA)[4,]
summary(modelC)$coefficients
summary(modelC)$coefficients[4,1]
summary(modelC)
modelE = glm(bf~agechldc+sex_chld+sex_chld:agechldc, data=nepalibf,
family=binomial(link="logit"))
summary(modelE)
modelA$coefficients
confint.default(modelA)
knitr::opts_chunk$set(echo = TRUE)
in
i
i
i
install.packages("ResourceSelection") # only if haven't installed yet
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
nepalibf = read_csv("nepalibf.csv")
head(nepalibf)
summary(nepalibf)
table(nepalibf$bf)
dim(nepalibf)
sum(table(nepalibf$bf))
pairs(~ parity + age_chld + age_mom + bf, data=nepalibf, upper.panel=NULL)
pairs(~ jitter(parity, .5) + jitter(age_chld, .5) + jitter(age_mom, .5) + jitter(bf, .5), data=nepalibf, upper.panel=NULL, pch=20, cex=.5)
boxplot(age_chld ~ bf, data=nepalibf, ylab="Age of child (years)")
boxplot(age_mom ~ bf, data=nepalibf)
boxplot(parity ~ bf, data=nepalibf)
CT = xtabs(~ sex_chld + bf, data=nepalibf)
addmargins(CT)
prop.table(CT, margin=1)
addmargins(prop.table(CT, margin=1), margin=2)
graphData = nepalibf %>% #new data frame with variables to graph
group_by(age_chld_quart) %>% #group by age quartile
summarize(prop = mean(bf, na.rm=TRUE), # prop of bf in each quartile
lodds = log(prop/(1-prop))) # log odds for each quartile
qplot(x=age_chld_quart, y=lodds, data=graphData, xlab="Age group of child (quartiles)", ylab="log(odds of breast-feeding)", geom = c("line","point"))
nepalibf = nepalibf %>%
mutate(agechldc = age_chld - mean(age_chld))
model1 = glm(bf ~ sex_chld + agechldc, data=nepalibf,
family=binomial(link="logit"))
summary(model1)
model1$coefficients
exp(model1$coefficients)
exp(confint.default(model1))
nepalibf = nepalibf %>% mutate(x3 = agechldc^2)
modelA = glm(bf~sex_chld+agechldc+x3, data=nepalibf, family=binomial(link="logit"))
summary(modelA)
modelB = glm(bf~sex_chld+agechldc, data=nepalibf, family=binomial(link="logit"))
summary(modelB)
anova(modelA, modelB, test="LRT")
modelA$coefficients
confint.default(modelA)
nepalibf = nepalibf %>%
mutate(age1 = age_chld - 24,
age2 = ifelse(age_chld > 24, age_chld - 24, 0),
age3 = ifelse(age_chld > 36, age_chld - 36, 0))
modelC = glm(bf~sex_chld+age1+age2+age3, data=nepalibf, family=binomial(link="logit"))
summary(modelC)
modelD = glm(bf~sex_chld+age_chld, data=nepalibf, family=binomial(link="logit"))
summary(modelD)
anova(modelC, modelD, test="LRT")
modelE = glm(bf~agechldc+sex_chld+sex_chld:agechldc, data=nepalibf,
family=binomial(link="logit"))
summary(modelE)
nepalibf = nepalibf %>%
na.omit() %>% # Remove observations with missing data
mutate(sex_chld=recode_factor(sex_chld, `0`="Male", `1`="Female")) # Factor sex_chld
modelD = glm(bf ~ sex_chld + age_chld, data=nepalibf, family=binomial(link="logit"))
nepalibf = nepalibf %>% mutate(phat = predict(modelD, type="response"))
qplot(x=age_chld, y=phat, color=sex_chld, shape=sex_chld, data=nepalibf,
xlab="Child's age in years", ylab="Predicted prevalence of Breast-feeding")
# install.packages("ResourceSelection") # only if haven't installed yet
library(ResourceSelection)
hoslem.test(nepalibf$bf, nepalibf$phat, g=10)
hoslem.test(nepalibf$bf, nepalibf$phat)$observed
hoslem.test(nepalibf$bf, nepalibf$phat)$expected
modelF = glm(bf~sex_chld+age_chld+age_mom+parity, data=nepalibf,
family=binomial(link="logit"))
summary(modelF)
summary(modelD)
anova(modelD, modelF, test="LRT")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
nepalibf = read_csv("nepalibf.csv")
head(nepalibf)
summary(nepalibf)
table(nepalibf$bf)
dim(nepalibf)
sum(table(nepalibf$bf))
pairs(~ parity + age_chld + age_mom + bf, data=nepalibf, upper.panel=NULL)
pairs(~ jitter(parity, .5) + jitter(age_chld, .5) + jitter(age_mom, .5) + jitter(bf, .5), data=nepalibf, upper.panel=NULL, pch=20, cex=.5)
boxplot(age_chld ~ bf, data=nepalibf, ylab="Age of child (years)")
boxplot(age_mom ~ bf, data=nepalibf)
boxplot(parity ~ bf, data=nepalibf)
CT = xtabs(~ sex_chld + bf, data=nepalibf)
addmargins(CT)
prop.table(CT, margin=1)
addmargins(prop.table(CT, margin=1), margin=2)
graphData = nepalibf %>% #new data frame with variables to graph
group_by(age_chld_quart) %>% #group by age quartile
summarize(prop = mean(bf, na.rm=TRUE), # prop of bf in each quartile
lodds = log(prop/(1-prop))) # log odds for each quartile
qplot(x=age_chld_quart, y=lodds, data=graphData, xlab="Age group of child (quartiles)", ylab="log(odds of breast-feeding)", geom = c("line","point"))
nepalibf = nepalibf %>%
mutate(agechldc = age_chld - mean(age_chld))
model1 = glm(bf ~ sex_chld + agechldc, data=nepalibf,
family=binomial(link="logit"))
summary(model1)
model1$coefficients
exp(model1$coefficients)
exp(confint.default(model1))
nepalibf = nepalibf %>% mutate(x3 = agechldc^2)
modelA = glm(bf~sex_chld+agechldc+x3, data=nepalibf, family=binomial(link="logit"))
summary(modelA)
modelB = glm(bf~sex_chld+agechldc, data=nepalibf, family=binomial(link="logit"))
summary(modelB)
anova(modelA, modelB, test="LRT")
modelA$coefficients
confint.default(modelA)
nepalibf = nepalibf %>%
mutate(age1 = age_chld - 24,
age2 = ifelse(age_chld > 24, age_chld - 24, 0),
age3 = ifelse(age_chld > 36, age_chld - 36, 0))
modelC = glm(bf~sex_chld+age1+age2+age3, data=nepalibf, family=binomial(link="logit"))
summary(modelC)
modelD = glm(bf~sex_chld+age_chld, data=nepalibf, family=binomial(link="logit"))
summary(modelD)
anova(modelC, modelD, test="LRT")
modelE = glm(bf~agechldc+sex_chld+sex_chld:agechldc, data=nepalibf,
family=binomial(link="logit"))
summary(modelE)
nepalibf = nepalibf %>%
na.omit() %>% # Remove observations with missing data
mutate(sex_chld=recode_factor(sex_chld, `0`="Male", `1`="Female")) # Factor sex_chld
modelD = glm(bf ~ sex_chld + age_chld, data=nepalibf, family=binomial(link="logit"))
nepalibf = nepalibf %>% mutate(phat = predict(modelD, type="response"))
qplot(x=age_chld, y=phat, color=sex_chld, shape=sex_chld, data=nepalibf,
xlab="Child's age in years", ylab="Predicted prevalence of Breast-feeding")
# install.packages("ResourceSelection") # only if haven't installed yet
library(ResourceSelection)
hoslem.test(nepalibf$bf, nepalibf$phat, g=10)
hoslem.test(nepalibf$bf, nepalibf$phat)$observed
hoslem.test(nepalibf$bf, nepalibf$phat)$expected
modelF = glm(bf~sex_chld+age_chld+age_mom+parity, data=nepalibf,
family=binomial(link="logit"))
summary(modelF)
summary(modelD)
anova(modelD, modelF, test="LRT")
hoslem.test(nepalibf$bf, nepalibf$phat, g=10)
hoslem.test(nepalibf$bf, nepalibf$phat)$observed
hoslem.test(nepalibf$bf, nepalibf$phat)$expected
hoslem.test(nepalibf$bf, nepalibf$phat)$observed
hoslem.test(nepalibf$bf, nepalibf$phat, g=10)
hoslem.test(nepalibf$bf, nepalibf$phat, g=10)$p.value
modelF = glm(bf~sex_chld+age_chld+age_mom+parity, data=nepalibf,
family=binomial(link="logit"))
summary(modelF)
summary(modelD)
anova(modelD, modelF, test="LRT")
.Library
find.package('rj')
find.package('r')
find.package('rlang')
Sys.info()
R.Version()
R.Version()
grants_df <- readRDS("grant_df.rds")
# Elizabeth Colantuoni
setwd("~/github/scholar/")
grants_df <- readRDS("grant_df.rds")
View(grants_df)
grant_df<-read_rds("grant_df.rds")
library(readr)
grant_df<-read_rds("grant_df.rds")
object.size(grant_df)
